dnl Process this file with autoconf to produce a configure script.
AC_INIT(rawsrv)
AM_INIT_AUTOMAKE(meabench, 1.1.4)
dnl AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
dnl AC_PROG_F77
AC_PROG_LN_S
AC_PROG_MAKE_SET

if test "x$CXX" = "x"; then
  AC_MSG_ERROR([No C++ compiler found.])
fi

if test "x$CC" = "x"; then
  AC_MSG_ERROR([No C compiler found.])
fi

if test "x$LN_S" = "x"; then
  AC_MSG_ERROR([No 'ln -s' program found.])
fi


dnl if test "x$F77" = "x"; then
dnl   AC_MSG_ERROR([No Fortran compiler found.])
dnl fi

dnl Checks for libraries.
dnl pthread
AC_CHECK_LIB(pthread, pthread_create,,"Cannot find pthread library. pthread may be obtained from various sources. Your distribution may carry it as an optional package.")

dnl qt [DW]
AC_LANG_CPLUSPLUS
QTPATHS="$QTDIR  /usr/lib/qt3 /usr/share/qt3 /usr/lib/qt /usr/lib64/qt-3.3"
MYQT=""
for x in $QTPATHS; do
  if test -f $x/include/qapplication.h ; then
     MYQT="$x"
  fi
done

AC_MSG_CHECKING([for qapplication.h])
AC_CACHE_VAL(ac_cv_hdr_qt,
  [ac_save_CPPFLAGS="$CPPFLAGS" 
   CPPFLAGS="$CPPFLAGS -I$MYQT/include"
   AC_TRY_COMPILE([
       #include <qapplication.h>
     ],[
       int c;
       char **v;
       QApplication myap(c,v);
     ],
     [ac_cv_hdr_qt=yes],
     [ac_cv_hdr_qt=no])
   CPPFLAGS="$ac_save_CPPFLAGS"
  ])
if eval "test $ac_cv_hdr_qt = no"; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR([Qt includes not found. Please set QTDIR before running configure again.])
else
  AC_MSG_RESULT(yes)
  QTINC="-I$MYQT/include"
  AC_SUBST(QTINC)
fi

AC_MSG_CHECKING([for qVersion in -lqt-mt])
AC_CACHE_VAL(ac_cv_lib_qt,
  [ac_save_LIBS="$LIBS"
   ac_save_CPPFLAGS="$CPPFLAGS" 
   LIBS="-L$MYQT/lib -lqt-mt $LIBS"
   CPPFLAGS="$CPPFLAGS -I$MYQT/include"
   AC_TRY_LINK([
       #include <qapplication.h>
     ],[
       char const *x=qVersion();
     ],
     [ac_cv_lib_qt=qt-mt],
     [ac_cv_lib_qt=no])
   LIBS="$ac_save_LIBS"
   CPPFLAGS="$ac_save_CPPFLAGS"
  ])
if eval test "$ac_cv_lib_qt = no"; then
  AC_MSG_CHECKING([for qVersion in -lqt])
  AC_CACHE_VAL(ac_cv_lib_qt,
    [ac_save_LIBS="$LIBS"
     ac_save_CPPFLAGS="$CPPFLAGS" 
     LIBS="-L$MYQT/lib -lqt $LIBS"
     CPPFLAGS="$CPPFLAGS -I$MYQT/include"
     AC_TRY_LINK([
         #include <qapplication.h>
       ],[
         char const *x=qVersion();
       ],
       [ac_cv_lib_qt=qt],
       [ac_cv_lib_qt=no])
     LIBS="$ac_save_LIBS"
     CPPFLAGS="$ac_save_CPPFLAGS"
    ])
fi
if eval "test $ac_cv_lib_qt = no"; then
  AC_MSG_RESULT(no)
  AC_MSG_ERROR(AC_MSG_ERROR([Qt libraries not found. Please set QTDIR before running configure again.]))
else
  LIBS="$LIBS -l$ac_cv_lib_qt -L$MYQT/lib"
  AC_MSG_RESULT(yes)
  QTLIB="-L$MYQT/lib -lqt-mt"
  AC_SUBST(QTLIB)
fi

AC_MSG_CHECKING([for moc])
AC_CACHE_VAL(ac_cv_bin_qt,
  [tmpFILE=/tmp/mocv$$
   $MYQT/bin/moc -v 2> $tmpFILE
   if grep -q 'Qt 3' $tmpFILE; then
     ac_cv_bin_qt=$MYQT/bin
   else
     unlink $tmpFILE
     moc -v 2> $tmpFILE
     if grep -q 'Qt 3' $tmpFILE; then
       ac_cv_bin_qt=yes
     else
       ac_cv_bin_qt=no
     fi
   fi
   unlink $tmpFILE
  ])

AC_MSG_RESULT($ac_cv_bin_qt)
if eval "test $ac_cv_bin_qt = no"; then
  AC_MSG_ERROR(AC_MSG_ERROR([Qt binaries (moc) not found. Please set QTDIR before running configure again.]))
else
  if eval "test $ac_cv_bin_qt = yes"; then
     QTBIN=""
  else
     QTBIN="$MYQT/bin/"
  fi
  AC_SUBST(QTBIN)
fi

AC_LANG_C

dnl Checks for header files.
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_GETPGRP
AC_PROG_GCC_TRADITIONAL
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_CHECK_FUNCS(getcwd gettimeofday mkdir select socket strerror)

dnl Check for kernel includes
AC_MSG_CHECKING([for kernel include files])
AC_ARG_WITH(kernel, [ --with-kernel=KERNEL_PATH   Define the location of the 
	                   kernel include files. Default: /lib/modules/`uname -r`/build ],[
	KERNEL_DIR=$withval ],[
	KERNEL_DIR=/lib/modules/`uname -r`/build ])
if eval "test x$withval = xno"; then
        AC_MSG_WARN("Kernel includes not found. You will get compilation errors when building the drivers.")
	KERNEL_DIR=no
else
	if eval "test ! -f $KERNEL_DIR/include/linux/kernel.h"; then
		AC_MSG_ERROR("Cannot find kernel includes. Please specify with --with-kernel.")
		KERNEL_DIR=no
	fi
fi
AC_MSG_RESULT([$KERNEL_DIR]);
KERNEL_INC=$KERNEL_DIR/include
AC_SUBST(KERNEL_DIR)
AC_SUBST(KERNEL_INC)

dnl Check for kernel version number
AC_MSG_CHECKING([for kernel version number 2.4 or 2.6 in include path])
AC_ARG_WITH(kernel-version, [ --with-kernel-version=2.4 or 2.6   Define which kernel series to use],[
	KERNEL_VSN=$withval ],[
	KERNEL_VSN=`echo $KERNEL_INC | sed ['s/[^0-9]*\([0-9][0-9]*\.[0-9][0-9]*\).*/\\1/']` ])
if eval "test x$KERNEL_VSN = x2.4"; then
	AC_MSG_RESULT([found 2.4])
elif eval "test x$KERNEL_VSN = x2.6"; then
	AC_MSG_RESULT([found 2.6])
else
	AC_MSG_RESULT([not found])
	AC_MSG_ERROR("Unknown kernel version ($KERNEL_VSN). Please specify 2.4 or 2.6 with --with-kernel-version.")
fi
AC_SUBST(KERNEL_VSN)

AM_CONDITIONAL([COND_KERNEL_2_4], [test x$KERNEL_VSN = x2.4])
AM_CONDITIONAL([COND_KERNEL_2_6], [test x$KERNEL_VSN = x2.6])

dnl AC_OUTPUT(config.h \
AC_OUTPUT( \
          Makefile \
          base/Makefile \
	  common/Makefile \
          gui/Makefile \
          tools/Makefile \
	  rms/Makefile \
          spikesrv/Makefile \
          replay/Makefile \
          record/Makefile \
          scope/Makefile \
          artifilt/Makefile \
          rawsrv/Makefile \
	  neurosock/Makefile \
dnl          utils/Makefile \
	  matlab/Makefile \
          )

