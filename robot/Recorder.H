/* record/Recorder.H: part of meabench, an MEA recording and analysis tool
** Copyright (C) 2000-2002  Daniel Wagenaar (wagenaar@caltech.edu)
**
** This program is free software; you can redistribute it and/or modify
** it under the terms of the GNU General Public License as published by
** the Free Software Foundation; either version 2 of the License, or
** (at your option) any later version.
**
** This program is distributed in the hope that it will be useful,
** but WITHOUT ANY WARRANTY; without even the implied warranty of
** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
** GNU General Public License for more details.
**
** You should have received a copy of the GNU General Public License
** along with this program; if not, write to the Free Software
** Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Recorder.H

#ifndef RECORDER_H

#define RECORDER_H

#include <base/Error.H>
#include <base/SFCVoid.H>
#include "TCPDataServer.h"
#include "StimSrv.h"

#define TCP_SERVER_PORT 32130
/*
#define MOTOR_SERVER_PORT 32130
#define STIMULUS_SERVER_PORT 32131
*/

class Recorder
{
public:
    static const timeref_t LONGESTFILE = 1024 * 1024 * 1024;
    /* If a write operation would make a file longer than LONGESTFILE,
       the file is closed, and a new one is opened with numerical extension.
    */
public:
    Recorder(SFCVoid *source, string const &filename) throw(Error);
    virtual ~Recorder();
    string const &filename() const
    {
        return fn;
    }
    virtual void set_bounds(timeref_t t0, timeref_t t1) throw(Error);
    /*:A t0, t1 refer to the stream's aux.trig, that is, they are relative
         to the raw stream's start.
    */
    virtual timeref_t save_some(timeref_t upto = INFTY) throw(Error);
    //:A upto refers to the stream itself
    //:R oldest buffer contents written
    timeref_t latest() const
    {
        return last;
    }
    void skip_to(timeref_t t)
    {
        last = t;
    }

    bool closeSocket()
    {
        return tcpServer->disconnect();
        /*
        dataServer->disconnect();
        return true;
        */
    }

private:
    void newfile() throw(Error);
protected:
    SFCVoid *source;
    string fn;
    timeref_t last; // refers to the stream
    timeref_t savefrom, saveto; // refers to the stream

    //#####################
    TCPDataServer *tcpServer;
    /*
    TCPDataServer *motorServer;
    TCPDataServer *stimulusServer;
    */
    StimSrv *stimSrv;
    unsigned char* receivedDataBuffer;

private:
    FILE *fh;
    timeref_t current_file_length;
    int file_seq_no;
};

#endif
